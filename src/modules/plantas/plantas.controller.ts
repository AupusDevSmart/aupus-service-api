// src/modules/plantas/plantas.controller.ts - CORRIGIDO
import { 
  Controller, 
  Post, 
  Get, 
  Put,
  Param,
  Body, 
  Query,
  HttpStatus, 
  Logger,
  ValidationPipe
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiBody, 
  ApiParam,
  ApiQuery
} from '@nestjs/swagger';
import { PlantasService, PaginatedResponse } from './plantas.service';
import { CreatePlantaDto } from './dto/create-planta.dto';
import { UpdatePlantaDto } from './dto/update-planta.dto';
import { FindAllPlantasDto } from './dto/find-all-plantas.dto';
import { Planta, ProprietarioBasico } from './entities/planta.entity';

@ApiTags('plantas')
@Controller('plantas') // ‚úÖ CORRIGIDO: Remover 'api/v1' - s√≥ deixar 'plantas'
export class PlantasController {
  private readonly logger = new Logger(PlantasController.name);

  constructor(private readonly plantasService: PlantasService) {}

  // ‚úÖ IMPORTANTE: Rota espec√≠fica ANTES da rota gen√©rica com par√¢metro
  @Get('proprietarios')
  @ApiOperation({ 
    summary: 'Listar propriet√°rios dispon√≠veis',
    description: 'Retorna lista de usu√°rios que podem ser propriet√°rios de plantas'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: 'Lista de propriet√°rios retornada com sucesso',
    type: [ProprietarioBasico]
  })
  async findProprietarios(): Promise<ProprietarioBasico[]> {
    this.logger.log(`üë• [LIST PROPRIETARIOS] Buscando propriet√°rios dispon√≠veis`);

    try {
      const proprietarios = await this.plantasService.findProprietarios();
      
      this.logger.log(`‚úÖ [LIST PROPRIETARIOS] Encontrados ${proprietarios.length} propriet√°rios`);
      return proprietarios;
      
    } catch (error) {
      this.logger.error(`‚ùå [LIST PROPRIETARIOS] Erro ao buscar propriet√°rios:`, error.message);
      throw error;
    }
  }

  // ‚úÖ ROTA: POST /api/v1/plantas (Criar nova planta)
  @Post()
  @ApiOperation({ 
    summary: 'Criar nova planta',
    description: 'Cadastra uma nova planta no sistema com todas as informa√ß√µes necess√°rias'
  })
  @ApiBody({ type: CreatePlantaDto })
  @ApiResponse({ 
    status: HttpStatus.CREATED, 
    description: 'Planta criada com sucesso',
    type: Planta 
  })
  @ApiResponse({ 
    status: HttpStatus.BAD_REQUEST, 
    description: 'Dados inv√°lidos ou erro de valida√ß√£o' 
  })
  @ApiResponse({ 
    status: HttpStatus.NOT_FOUND, 
    description: 'Propriet√°rio n√£o encontrado' 
  })
  @ApiResponse({ 
    status: HttpStatus.CONFLICT, 
    description: 'CNPJ j√° cadastrado no sistema' 
  })
  async create(@Body() createPlantaDto: CreatePlantaDto): Promise<Planta> {
    this.logger.log(`üè≠ [CREATE PLANTA] Iniciando cria√ß√£o de planta`);
    this.logger.log(`üìù [CREATE PLANTA] Dados recebidos:`, JSON.stringify(createPlantaDto, null, 2));

    try {
      const planta = await this.plantasService.create(createPlantaDto);
      
      this.logger.log(`‚úÖ [CREATE PLANTA] Planta criada com sucesso - ID: ${planta.id}`);
      return planta;
      
    } catch (error) {
      this.logger.error(`‚ùå [CREATE PLANTA] Erro ao criar planta:`, error.message);
      throw error;
    }
  }

  // ‚úÖ ROTA: GET /api/v1/plantas (Listar plantas com filtros e pagina√ß√£o)
  @Get()
  @ApiOperation({ 
    summary: 'Listar plantas',
    description: 'Retorna lista paginada de plantas com filtros opcionais'
  })
  @ApiQuery({ name: 'page', required: false, type: Number, description: 'N√∫mero da p√°gina', example: 1 })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'Itens por p√°gina', example: 10 })
  @ApiQuery({ name: 'search', required: false, type: String, description: 'Busca por nome, CNPJ, localiza√ß√£o' })
  @ApiQuery({ name: 'proprietarioId', required: false, type: String, description: 'Filtrar por propriet√°rio' })
  @ApiQuery({ name: 'orderBy', required: false, enum: ['nome', 'cnpj', 'localizacao', 'cidade', 'criadoEm', 'proprietario'], description: 'Campo para ordena√ß√£o' })
  @ApiQuery({ name: 'orderDirection', required: false, enum: ['asc', 'desc'], description: 'Dire√ß√£o da ordena√ß√£o' })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: 'Lista de plantas retornada com sucesso'
  })
  @ApiResponse({ 
    status: HttpStatus.BAD_REQUEST, 
    description: 'Par√¢metros inv√°lidos' 
  })
  async findAll(
    @Query(new ValidationPipe({ transform: true })) queryDto: FindAllPlantasDto
  ): Promise<PaginatedResponse<Planta>> {
    this.logger.log(`üìã [LIST PLANTAS] Buscando plantas com filtros:`, JSON.stringify(queryDto, null, 2));

    try {
      const result = await this.plantasService.findAll(queryDto);
      
      this.logger.log(`‚úÖ [LIST PLANTAS] Encontradas ${result.data.length} plantas de ${result.pagination.total} total`);
      return result;
      
    } catch (error) {
      this.logger.error(`‚ùå [LIST PLANTAS] Erro ao buscar plantas:`, error.message);
      throw error;
    }
  }

  // ‚úÖ ROTA: GET /api/v1/plantas/:id (Buscar planta espec√≠fica)
  @Get(':id')
  @ApiOperation({ 
    summary: 'Buscar planta por ID',
    description: 'Retorna os detalhes de uma planta espec√≠fica'
  })
  @ApiParam({ 
    name: 'id', 
    description: 'ID da planta', 
    example: 'plt_01234567890123456789012345'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: 'Planta encontrada com sucesso',
    type: Planta 
  })
  @ApiResponse({ 
    status: HttpStatus.NOT_FOUND, 
    description: 'Planta n√£o encontrada' 
  })
  @ApiResponse({ 
    status: HttpStatus.BAD_REQUEST, 
    description: 'ID inv√°lido' 
  })
  async findOne(
    @Param('id') id: string
  ): Promise<Planta> {
    this.logger.log(`üîç [GET PLANTA] Buscando planta com ID: ${id}`);

    try {
      const planta = await this.plantasService.findOne(id);
      
      this.logger.log(`‚úÖ [GET PLANTA] Planta encontrada: ${planta.nome}`);
      return planta;
      
    } catch (error) {
      this.logger.error(`‚ùå [GET PLANTA] Erro ao buscar planta ${id}:`, error.message);
      throw error;
    }
  }

  // ‚úÖ ROTA: PUT /api/v1/plantas/:id (Atualizar planta)
  @Put(':id')
  @ApiOperation({ 
    summary: 'Atualizar planta',
    description: 'Atualiza os dados de uma planta existente'
  })
  @ApiParam({ 
    name: 'id', 
    description: 'ID da planta', 
    example: 'plt_01234567890123456789012345'
  })
  @ApiBody({ type: UpdatePlantaDto })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: 'Planta atualizada com sucesso',
    type: Planta 
  })
  @ApiResponse({ 
    status: HttpStatus.NOT_FOUND, 
    description: 'Planta n√£o encontrada' 
  })
  @ApiResponse({ 
    status: HttpStatus.BAD_REQUEST, 
    description: 'Dados inv√°lidos ou erro de valida√ß√£o' 
  })
  @ApiResponse({ 
    status: HttpStatus.CONFLICT, 
    description: 'CNPJ j√° cadastrado por outra planta' 
  })
  async update(
    @Param('id') id: string,
    @Body() updatePlantaDto: UpdatePlantaDto
  ): Promise<Planta> {
    this.logger.log(`üîÑ [UPDATE PLANTA] Atualizando planta ${id}`);
    this.logger.log(`üìù [UPDATE PLANTA] Dados recebidos:`, JSON.stringify(updatePlantaDto, null, 2));

    try {
      const planta = await this.plantasService.update(id, updatePlantaDto);
      
      this.logger.log(`‚úÖ [UPDATE PLANTA] Planta atualizada com sucesso: ${planta.nome}`);
      return planta;
      
    } catch (error) {
      this.logger.error(`‚ùå [UPDATE PLANTA] Erro ao atualizar planta ${id}:`, error.message);
      throw error;
    }
  }
}