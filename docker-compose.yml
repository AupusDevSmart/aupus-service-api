services:
  # Banco de dados PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: aupus-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: aupus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    networks:
      - aupus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicação NestJS
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aupus-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Variáveis de ambiente para produção
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@database:5432/aupus?schema=public
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3001
      PORT: 3000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - aupus-network
    volumes:
      # Para logs persistentes (opcional)
      - ./logs:/app/logs

  # PgAdmin para gerenciar o banco (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aupus-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aupus.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - database
    networks:
      - aupus-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Rede personalizada
networks:
  aupus-network:
    driver: bridge